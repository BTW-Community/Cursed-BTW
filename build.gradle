plugins {
    id 'maven-publish'
    id 'fabric-loom' version "1.5-SNAPSHOT"
    id 'application'
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = 'legacy-fabric'
        url = 'https://maven.legacyfabric.net'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        name 'HalfOf2'
        url 'https://storage.googleapis.com/devan-maven/'
    }
    mavenLocal {
        url = 'mvn'
    }
    /*maven {
        url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/'
    }*/
}

loom {
    setIntermediaryUrl('https://maven.legacyfabric.net/net/legacyfabric/intermediary/%1$s/intermediary-%1$s-v2.jar')
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}


sourceSets {
    btw {
        java {
            srcDirs = ['src/btw/java']
        }
        resources {
            srcDirs = ['src/btw/resources']
        }
    }
}

def lwjglVersion = System.getProperty("os.name").toLowerCase().contains("mac") ? "2.9.1" : "2.9.0"

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}") {
        exclude group: 'com.google'
    }
    mappings "btw.community:mappings:1.0.3"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    implementation 'net.fabricmc:fabric-loom:1.5-SNAPSHOT'

    implementation 'org.apache.logging.log4j:log4j-core:2.17.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.17.1'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'commons-io:commons-io:2.4'

    implementation "org.lwjgl.lwjgl:lwjgl_util:${lwjglVersion}"
    implementation "org.lwjgl.lwjgl:lwjgl:${lwjglVersion}"
    implementation "org.lwjgl.lwjgl:lwjgl-platform:${lwjglVersion}"

    implementation 'com.google.guava:guava:14.0.1'

    // This is what MC 1.6 uses
    shadow(include(implementation('com.google.code.gson:gson:2.8.9')))

    implementation("net.sourceforge.argo:argo:3.12")

    implementation fileTree(dir: "libs", include: "**.jar")
    modImplementation(group: 'net.devtech', name: 'grossfabrichacks', version: '6.2-btw') {
        exclude group: 'net.fabricmc'
    }

    implementation('it.unimi.dsi:fastutil:8.5.12')
    include 'net.devtech:grossfabrichacks:6.2-btw'
    include 'org.apache.logging.log4j:log4j-core:2.19.0'
    include 'org.apache.logging.log4j:log4j-api:2.19.0'

    implementation("net.auoeke:reflect:6.+")
    implementation("net.auoeke:unsafe:latest.release")

    implementation fileTree(dir: "libs", include: "**.zip")
    compileOnly fileTree(dir: "$projectDir/BTW_dev", include: "*.zip")
    compileOnly fileTree(dir: "$buildDir/BTW_dev", include: "**.jar")

    runtimeOnly fileTree(dir: "$buildDir/dev_run", include: "dev.jar")
}

configurations {
    btwCompileClasspath.extendsFrom implementation, modImplementation
}

shadowJar {
    from jar
    configurations = [project.configurations.shadow]
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.1-nightly-20130708-debug3') with {
                module("org.lwjgl.lwjgl:lwjgl_util:${lwjglVersion}")
            }
            substitute module('org.lwjgl.lwjgl:lwjgl:2.9.1-nightly-20130708-debug3') with {
                module("org.lwjgl.lwjgl:lwjgl:${lwjglVersion}")
            }
        }
        force "org.lwjgl.lwjgl:lwjgl-platform:${lwjglVersion}"
    }
}

processResources {
    inputs.property "version", project.version
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

java {
    withSourcesJar()
}

compileJava {
    dependsOn('btwJar')
}

task devPackMod(type:Copy) {
    dependsOn('jar')
    from sourceSets.main.output.classesDirs
    into file("$buildDir/classes/java/btw")
}

task devPackBTW(type:Copy) {
    dependsOn('devPackMod')
    dependsOn('btwJar')
}

task devPackRun(type:Jar) {
    dependsOn('devPackBTW')
    from fileTree("$buildDir/classes/java/btw")
    from fileTree("$projectDir/BTW_dev/")
    from sourceSets.btw.output.resourcesDir
    destinationDirectory = file("$buildDir/dev_run")
    archiveFileName = "dev.jar"
}

jar {
    from sourceSets.main.output.resourcesDir
    from sourceSets.main.output.classesDirs
    from fileTree("$projectDir/extras/")
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    // Set main
    manifest {
        attributes(
                "Main-Class": "net.superblaubeere27.asmdelta.Main",
        )
    }
}

task btwJar(type:Jar) {
    from fileTree("$projectDir/BTW_dev/")
    from sourceSets.btw.output.resourcesDir
    from sourceSets.btw.output.classesDirs
    destinationDirectory = file("$buildDir/BTW_dev")
    archiveFileName = "BTW_dev.jar"
}

remapJar {
    dependsOn shadowJar
    input.set shadowJar.archiveFile.get()
    destinationDirectory = file("$rootDir/release")
}

runClient {
    dependsOn('devPackRun')
}

// run net.superblaubeere27.amdelta.Main
application {
    mainClass = "net.superblaubeere27.asmdelta.Main"
}

run {
    applicationDefaultJvmArgs += "-Xss16M"
    args = ["--jar1", "vanilla-server-release.jar", "--jar2", "btw-server-release.jar", "-o", "./output-server-release.patch"]
    //args = ["--jar1", "vanilla-client-release.jar", "--jar2", "btw-client-release.jar", "-o", "./output-client-release.patch"]
}

project.afterEvaluate {
    devPackRun.dependsOn -= downloadAssets
}

runServer {
    dependsOn('devPackRun')
}

clean.doFirst {
    delete "$buildDir/dev_run"
    delete "$buildDir/BTW_dev"
}
